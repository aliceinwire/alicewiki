___Google Summer of Code day 21___

`What was my plan for today?`  

* Testing elivepatch
* Getting the kernel version dynamically
* Updating kpatch-build for work with Gentoo better

`What I did today?`  

fixing the problems pointed out by my mentor.

* Fixed software copyright header
* Fixed popen call
* Used regex for checking file extension
* Added debug option for the server
* Changed reserved word shadowing variables
* used os.path.join for link path
* dynamical pass kernel version

`what I will do next time?`  
* Testing elivepatch
* work on making elivepatch support multiple calls


___Google Summer of Code day 22___

`What was my plan for today?`  

* Testing elivepatch
* work on making elivepatch support multiple calls

`What I did today?`  

* working on sending the kernel version
* working on dividing users by UUID (Universally unique identifier)

With the first connection, because the UUID is not generated yet, it will be
created and returned by the elivepatch server.
The client will store the UUID in shelve so that it can
authenticate next time is inquiring the server.
By using python UUID I'm assigning different UUID for each user.
By using UUID we can start supporting multiple calls.

`what I will do next time?`  
* Testing elivepatch
* Cleaning code


___Google Summer of Code day 23___

`What was my plan for today?`  

* Testing elivepatch
* Cleaning code

`What I did today?`  

* commented some code part
* First draft of UUID working

elivepatch server need to generate a UUID for a client connection,
and assign the UUID to each client, this is needed for managing multiple
request.
The livepatch and configs files will be generated in different
folders for each client request and returned using the UUID.
Made a working draft.


`what I will do next time?`  
* Cleaning code
* testing it
* Go on with programming and starting implementing the CVE

___Google Summer of Code day 24___

`What was my plan for today?`  

* Cleaning code
* testing it
* Go on with programming and starting implementing the CVE

`What I did today?`  

* Working with getting the Linux kernel version from configuration file
* Working with parsing CVE repository

I could implement the Linux kernel version from the configuration file,
and I'm working on parsing the CVE repository.
Would also be a nice idea to work with the kpatch-build script for making it Gentoo
compatible.
But I also got into one problem, that is we need to find a way to download
old Gentoo-sources ebuild for building an old kernel, 
where the server there isn't the needed version of kernel sources.
This depends on how much back compatibility we want to give.
And with old Gentoo-sources, we cannot assure that is working.
Because old Gentoo-sources was using different versions of Gentoo repository, 
eclass.
So is a problem to discuss in the next days.

`what I will do next time?`  

* work on the CVE repository
* testing it

___Google Summer of Code day 25___

`What was my plan for today?`  

* Cleaning code
* testing and improving elivepatch

`What I did today?`  

As discussed with my mentor I worked on unifying the patch and configuration file 
RESTful API call.
And made the function to standardize the subprocess commands.

`what I will do next time?`  

* testing it and improving elivepatch

[[!tag tags/GSoC_2017  tags/gentoo ]]

___Google Summer of Code day 28___

`What was my plan for today?`  

* testing and improving elivepatch

`What i did today?`  

* Testing elivepatch with multi threading
* Removed check for uname kernel version as is getting the kernel 
   version directly from the kernel configuration file header.  
* Starting kpatch-build under the output folder
   Because kpatch-build is making the livepatch under the $PWD
   folder we are starting it under the uuid tmp folder and we
   are getting the livepatch from the uuid folder. this is 
   usefull for dealing with multi-threading
* Added some helper function for code clarity [not finished yet]
* Refactored for code clarity [not finished yet]

For making elivepatch multithread we can simply change app.run() of
flask with app.run(threaded=True).  
This will make flask spawn thread for each request 
(using class SocketServer.ThreadingMixIn and baseWSGIserver)1, but also if is 
working pretty nice, the suggested way of threading is probably using gunicorn or
uWSGI.2   
maybe like using flask-gunicorn: https://github.com/doobeh/flask-gunicorn 



`what i will do next time?`  

* testing and improving elivepatch

[1] https://docs.python.org/2/library/socketserver.html#SocketServer.ThreadingMixIn
[2] http://flask.pocoo.org/docs/0.12/deploying/

[[!tag draft ]]
